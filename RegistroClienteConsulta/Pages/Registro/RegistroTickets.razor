@page "/RegistroTickets"
@page "/RegistroTickets/{TicketId:int}"
@inject TicketsBLL TicketsBLL
@inject ClientesBLL ClienteBLL
@inject PrioridadBLL PrioridadBLL
@inject SistemasBLL SistemasBLL
@inject NotificationService notificationService

<PageTitle>Registro Tickets</PageTitle>

<EditForm Model="Ticket" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class=" card-header">
                <h3>Registro de Tickets</h3>
            </div>
            <div class=" card-body">

                @*TicketId*@
                <div class="mb-3">
                    <label class="form-group"> TicketId </label>
                    <div class="input-group">
                    <InputNumber class="col col-4" @bind-Value="Ticket.TicketId" />
                    <ValidationMessage For="@(() => Ticket.TicketId)" />
                    <button type="button" class="btn btn-sm btn-primary" @onclick="Buscar"> <i class="oi oi-magnifying-glass" /> </button>
                    </div>
                </div>
             
                @*ClienteId*@
                <div class="mb-3">
                    <label class="form-group"> ClienteId </label>
                        <InputSelect class="form-control col-2" @bind-Value="Ticket.ClienteId">
                            <option selected>Seleccione un cliente</option>
                            @foreach (var item in Clientes)
                            {
                                   <option value= "@item.ClienteId" > @item.Nombre </option>
                            }
                        </InputSelect>
                </div>
                 
                @*SistemaId*@
               <div class="mb-3">
                    <label class="form-group"> SistemaId </label>
                        <InputSelect class="form-control col-2" @bind-Value="Ticket.SistemaId">
                            <option selected>Seleccione un Sistema</option>
                            @foreach (var item in Sistemas)
                            {
                                   <option value= "@item.SistemaId" > @item.Nombre </option>
                            }
                        </InputSelect>
                </div>

                @*PrioridadId*@
                <div class="mb-3">
                    <label class="form-group"> PrioridadId </label>
                    <InputSelect class="form-control col-2" @bind-Value="Ticket.PrioridadId">
                        <option selected>Seleccione una Prioridad</option>
                        @foreach (var item in Prioridades)
                        {
                            <option value="@item.PrioridadId"> @item.Descripcion </option>
                        }
                    </InputSelect>
                </div>

                @*SolicitadoPor*@
                <div class=" mb-3">
                    <label class="form-group"> Solicitado Por </label>
                    <div class="input-group">
                        <InputText class="form-control" @bind-Value="Ticket.SolicitadoPor" placeholder="Coloque por quien fue solicitado" />
                        <ValidationMessage For="@(() =>Ticket.SolicitadoPor)" />
                    </div>
                </div>

                @*Asunto*@
                <div class=" mb-3">
                    <label class="form-group"> Asunto </label>
                    <div class="input-group">
                        <InputText class="form-control" @bind-Value="Ticket.Asunto" placeholder="Coloque un Asunto" />
                        <ValidationMessage For="@(() =>Ticket.Asunto)" />
                    </div>
                </div>

                @*Descripcion*@
                <div class=" mb-3">
                    <label class="form-group"> Descripcion </label>
                    <div class="input-group">
                        <InputText class="form-control" @bind-Value="Ticket.Descripcion" placeholder="Coloque una Descripcion" />
                        <ValidationMessage For="@(() =>Ticket.Descripcion)" />
                    </div>
                </div>

                  @* Fecha *@
                    <div Class="form-group mt-3">
                        <label class="row-text"> Dias Compromiso </label>
                        <div class="input-group">
                            <input type="date" @bind-value="Ticket.FechaT" />
                            <ValidationMessage For="@(() => Ticket.FechaT)" />
                        </div>
                    </div>

                @*Botones*@
                <div class="card-footer d-flex justify-content-center">
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-primary" @onclick="Nuevo"> <i class="oi oi-file" /> Nuevo </button>
                        <button type="submit" class="btn btn-success" @onclick="Guardar"> <i class=" oi oi-document " /> Guardar </button>
                        <button type="button" class="btn btn-danger" @onclick="Eliminar"> <i class="oi oi-trash" /> Eliminar  </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {

    public Tickets Ticket { get; set; } = new Tickets();

    public List<Prioridades> Prioridades { get; set; } = new List<Prioridades>();

    public List<Sistemas> Sistemas { get; set; } = new List<Sistemas>();

    public List<Clientes> Clientes { get; set; } = new List<Clientes>();

    [Parameter]
    public int TicketId { get; set; }

    protected override void OnInitialized()
    {
        Nuevo();
        if (TicketId > 0)
        {
            Ticket.TicketId = TicketId;
            Buscar();
        }
        Clientes = ClienteBLL.GetList(p => true);
        Prioridades = PrioridadBLL.GetList(p => true);
        Sistemas = SistemasBLL.GetList(p => true);
    }

    public void Buscar()
    {

        var TicketsBuscar = TicketsBLL.Buscar(Ticket.TicketId);
        if (TicketsBuscar != null)
        {
            Ticket = TicketsBuscar;
        }
        else
        {
            notificationService.ShowNotification(
            titulo: "error de busqueda",
            mensaje: "Registro no encontrado",
            NotificationSeverity.Error);
        }
    }

    public void Nuevo()
    {
        this.Ticket = new Tickets();
    }

    public void Guardar()
    {
        if (Validar())
        {
            notificationService.ShowNotification(
            titulo: "Validacion",
            mensaje: "Error revise los campos",
            NotificationSeverity.Error);
            return;
        }

        var guardo = TicketsBLL.Guardar(this.Ticket);
        if (guardo)
        {
            notificationService.ShowNotification(
            titulo: "Exito",
            mensaje: "Guardado correctamente",
            NotificationSeverity.Success);
            Nuevo();
        }
        else
        {
            notificationService.ShowNotification(
            titulo: "Error",
            mensaje: "Ocurrio un error y no fue posible guardar",
            NotificationSeverity.Error);
        }
    }

    public void Eliminar()
    {
        Buscar();

        if (TicketsBLL.Eliminar(this.Ticket))
        {
            notificationService.ShowNotification(
            titulo: "Exito",
            mensaje: "Eliminado con Exito",
            NotificationSeverity.Success);
            Nuevo();
        }
        else
        {
            notificationService.ShowNotification(
            titulo: "Error",
            mensaje: "Ocurrio un error y no fue posible eliminar",
            NotificationSeverity.Error);
        }
    }

    private bool Validar()
    {

        return TicketsBLL.Validar(Ticket.Descripcion);

    }
}
